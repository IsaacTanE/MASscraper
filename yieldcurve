import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go

# ---------------- CONFIG ----------------
file_path = r"C:\Users\You\curves.xlsx"   # <-- your Excel path
sheet_name = "Sheet1"                     # <-- your sheet
# ----------------------------------------

TENOR_MAP = {"O/N": 1/365, "ON": 1/365, "1D": 1/365,
             "1W": 7/365, "2W": 14/365, "3W": 21/365,
             "1M": 1/12, "2M": 2/12, "3M": 3/12,
             "6M": 6/12, "9M": 9/12,
             "12M": 1.0, "1Y": 1.0, "18M": 1.5, "2Y": 2.0}

def coerce_tenor_years(s):
    def _one(x):
        if pd.isna(x): return np.nan
        xs = str(x).strip().upper()
        if xs in TENOR_MAP: return TENOR_MAP[xs]
        if xs.endswith("M"): return float(xs[:-1])/12
        if xs.endswith("Y"): return float(xs[:-1])
        try: return float(xs)
        except: return np.nan
    return s.apply(_one)

# ---- LOAD ----
df = pd.read_excel(file_path, sheet_name=sheet_name, dtype={"Tenor": object})
df["Date"] = pd.to_datetime(df["Date"], dayfirst=True, errors="coerce")
df["TenorY"] = coerce_tenor_years(df["Tenor"])
df = df.dropna(subset=["Date","TenorY","Sora","Sora_FX"])
df = df[df["TenorY"] <= 2.0].sort_values(["Date","TenorY"]).reset_index(drop=True)

# ---- TODAY vs YDAY overlay (both curves) ----
dates = sorted(df["Date"].unique())
if len(dates) >= 2:
    g0 = df[df["Date"] == dates[-2]]
    g1 = df[df["Date"] == dates[-1]]
    fig = go.Figure()
    # Sora curves
    fig.add_trace(go.Scatter(x=g0["TenorY"], y=g0["Sora"], mode="lines+markers",
                             name=f"Sora {dates[-2].date()}"))
    fig.add_trace(go.Scatter(x=g1["TenorY"], y=g1["Sora"], mode="lines+markers",
                             name=f"Sora {dates[-1].date()}"))
    # Sora_FX curves
    fig.add_trace(go.Scatter(x=g0["TenorY"], y=g0["Sora_FX"], mode="lines+markers",
                             name=f"Sora_FX {dates[-2].date()}"))
    fig.add_trace(go.Scatter(x=g1["TenorY"], y=g1["Sora_FX"], mode="lines+markers",
                             name=f"Sora_FX {dates[-1].date()}"))
    fig.update_layout(title="SORA vs SORA_FX – Today vs Yesterday",
                      xaxis_title="Tenor (Years)", yaxis_title="Rate (%)")
    fig.show()

# ---- Animation (both curves over time) ----
df_long = df.melt(id_vars=["Date","TenorY"], value_vars=["Sora","Sora_FX"],
                  var_name="Curve", value_name="Rate")
df_long["DateStr"] = df_long["Date"].dt.strftime("%Y-%m-%d")

fig2 = px.line(df_long, x="TenorY", y="Rate", color="Curve",
               animation_frame="DateStr", facet_col="Curve",
               title="Curve Animation: SORA vs SORA_FX (≤2Y)")
fig2.show()